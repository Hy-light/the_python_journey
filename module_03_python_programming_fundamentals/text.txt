Condition Statements

Comparison Operators

Comparison operations compare some value or operand and based on a condition, produce a Boolean. When comparing two values you can use these operators:

    equal: ==
    not equal: !=
    greater than: >
    less than: <
    greater than or equal to: >=
    less than or equal to: <=

Branching
Branching allows us to run different statements for different inputs. 
It is helpful to think of an if statement as a locked room, if the statement is True we can enter the room and your program will run some predefined tasks, 
but if the statement is False the program will ignore the task.
For example, consider the blue rectangle representing an ACDC concert. 
If the individual is older than 18, they can enter the ACDC concert. If they are 18 or younger, they cannot enter the concert.
We can use the condition statements learned before as the conditions that need to be checked in the if statement. 
The syntax is as simple as  if condition statement :, which contains a word if, any condition statement, and a colon at the end. 
Start your tasks which need to be executed under this condition in a new line with an indent. 
The lines of code after the colon and with an indent will only be executed when the if statement is True. 
The tasks will end when the line of code does not contain the indent.
In the case below, the code print(“you can enter”) is executed only if the variable age is greater than 18 is a True case because this line of code has the indent. 
However, the execution of print(“move on”) will not be influenced by the if statement.

Logical operators

Sometimes you want to check more than one condition at once. For example, you might want to check if one condition and another condition are both True. Logical operators allow you to combine or modify conditions.

    and
    or
    not

The and statement is only True when both conditions are true. The or statement is True if one condition, or both are True. 
The not statement outputs the opposite truth value.
